seq_BString=BStringSet(Alpha_seqs)  # library('Biostrings')
#motifs_seqs=subseq(seq_BString,start= motif_loc, width=7)
unique_letters=uniqueLetters(seq_BString) # # library('Biostrings')
motif_width=7
source('freq_matrices.R')
source('calculate_MaxScoreInd_Of_SelectedSeq.R')
mystart=sapply(width(seq_BString)-motif_width, sample, 1)
mystart
source('freq_matrices.R')
source('calculate_MaxScoreInd_Of_SelectedSeq.R')
mystart=sapply(width(seq_BString)-motif_width, sample, 1)
mystart_initial=mystart
seq_lengths=width(seq_BString)
motifScore_rep_count=0
motifScore_circular_variable=seq(1,100)
while(sd(motifScore_circular_variable) > .1)
{
removed_seq_ind=sample(seq(1:length(seq_BString)),1)
remaining_seqs=seq_BString[-removed_seq_ind]
selected_seq=seq_BString[removed_seq_ind]
matrices=freq_matrices(remaining_seqs, motif_width , mystart[-removed_seq_ind], weight_vec[-removed_seq_ind,])
MaxScoreInd=calculate_MaxScoreInd_Of_SelectedSeq(matrices,selected_seq, motif_width )
mystart[removed_seq_ind]=MaxScoreInd
#print(err)
motifScore=matrices$F_score
print(c(motifScore_rep_count,motifScore))
motifScore_circular_variable=c(motifScore, motifScore_circular_variable)[1:length(motifScore_circular_variable)]
## randomly move discovered motif left or right by the random length after certain interval ##
motifScore_rep_count=motifScore_rep_count+1
if(motifScore_rep_count>3000)
{
print(paste0('====',motifScore_rep_count))
shift_length <- c(2,1,1,2)
tempStartLst=list()
F_score=c()
tempError=c()
for(k in 1:length(shift_length))
{
tempStart=mystart
if(k>(length(shift_length)/2))  # shift right
{
good_ind=which((tempStart+shift_length[k]+ motif_width) < seq_lengths)
tempStart[good_ind] = tempStart[good_ind] + shift_length[k] ##
tempMatrices=freq_matrices(remaining_seqs, motif_width , tempStart[-removed_seq_ind], weight_vec[-removed_seq_ind,])
F_score[k]=tempMatrices$F_score
tempStartLst[[k]]=tempStart
}else if(k <= (length(shift_length)/2)) # shift left
{
good_ind=which(tempStart > shift_length[k])
tempStart[good_ind] = tempStart[good_ind]-shift_length[k]
tempMatrices=freq_matrices(remaining_seqs, motif_width , tempStart[-removed_seq_ind], weight_vec[-removed_seq_ind,])
F_score[k]=tempMatrices$F_score
tempStartLst[[k]]=tempStart
}
}
req_pos_inds=which(F_score>motifScore)
#shift_FScore_vec=F_score/sum(F_score)
#random_shift=sample(seq(1:length(shift_FScore_vec)), size = 1, replace = TRUE, prob = shift_FScore_vec)
#mystart=tempStartLst[[random_shift]]
#req_pos_inds=seq(1:length(shift_length))
if(length(req_pos_inds)>0)
{
sampled_pos_ind=sample(req_pos_inds,1)
mystart=tempStartLst[[sampled_pos_ind]]
} else
{
mystart=mystart
}
motifScore_rep_count=0
}
}
mystart
final_parameter_data=freq_matrices(seq_BString, motif_width , mystart, unname(unlist(weight_vec)))
final_PSSM_matrix=final_parameter_data$motif_PSSM
final_bkg_vec=final_parameter_data$bkg_mat
library('ggseqlogo')
discovered_motifs=as.vector(subseq(seq_BString,start= mystart, width=motif_width))
p1<-ggseqlogo(discovered_motifs, namespace=alphabets, method='b')
library(plyr)
b=lapply(discovered_motifs, function(x) paste0(mapvalues(strsplit(x, '')[[1]],from=mapped_char, to=orginal_char, warn_missing = FALSE), collapse=''))
orgChar_discoveredMotifs=as.character(b)
p2 <- ggseqlogo(orgChar_discoveredMotifs, namespace=orginal_char, method='b')
library('gridExtra')
grid.arrange(p1, p2, nrow = 2)
rot_mat
rot_data=( rot_mat %*% t(mat_data ))
rot_data
rot_mat
colnames(rot_data)=c('X','Y','Z','const')
rot_data=data.frame(rot_data)
rot_data$Color=data$Color
rot2_data=rot_data[,-4]
rot_data=( rot_mat %*% (mat_data ))
rot_data=( rot_mat %*% (mat_data ))
rot_mat %*% (mat_data )
rot_mat
dim(mat_data)
dim(t(mat_data))
( rot_mat %*% t(mat_data ))
rot_data
dim(rot_data)
(mat_data %*% rot_mat)
t( rot_mat %*% t(mat_data ))
t( rot_mat %*% t(mat_data ))[20]
t( rot_mat %*% t(mat_data ))[20,]
(mat_data %*% rot_mat)[20,]
rot_mat
-sin(gam)
sin(gam)
424*20
20/444
34/444
6/42
(444-384)/444
load_all()
devtools::load_all(".")
load_all()
library(devtools)
load_all()
devtools::build_vignettes()
devtools::build_manual()
devtools::build_readme()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_vignettes()
devtools::install_github("rstudio/rmarkdown")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
devtools::build_vignettes()
devtools::document()
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library("Stereo3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::load_all(".")
library("Stereo3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
?? Stereo3D
library(Stereo3D)
?? Stereo3D
541+3839
4380/12
3100+365
(3100+365)*12
200*12
411*10
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
?? Stereo3D
devtools::load_all(".")
devtools::document()
library("Stereo3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
devtools::document()
library(Stereo3D)
library(Stereo3D)
devtools::document()
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
devtools::document()
library(Stereo3D)
devtools::document()
library(Stereo3D)
library(Stereo3D)
devtools::document()
library(Stereo3D)
library(Stereo3D)
library(rmarkdown)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
library(rmarkdown)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
getwd()
library(rmarkdown)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
devtools::document()
library(Stereo3D)
devtools::build_manual()
remove.packages(Stereo3D)
remove.packages('Stereo3D')
devtools::install_github("bioinfoDZ/Stereo3D",build_vignettes = FALSE )
devtools::install_github("bioinfoDZ/Stereo3D",build_vignettes = FALSE )
library('Stereo3D')
remove.packages('Stereo3D')
library('Stereo3D')
remove.packages('Stereo3D')
library('Stereo3D')
remove.packages('Stereo3D')
detach('Stereo3D')
detach(Stereo3D)
detach("package:Stereo3D", unload=TRUE)
library('Stereo3D')
devtools::install_github("bioinfoDZ/Stereo3D",build_vignettes = FALSE )
library('Stereo3D')
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
library('Stereo3D')
library(Stereo3D)
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
library(Stereo3D)
devtools::install_github("bioinfoDZ/Stereo3D",build_vignettes = FALSE )
3500/3
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
detach("package:Stereo3D", unload=TRUE)
data=read.table(file='Mesp1_WT_SubCells.tsv', header = TRUE)
setwd("~/Documents/DZ-VKS")
data=read.table(file='Mesp1_WT_SubCells.tsv', header = TRUE)
data_name=sub('\\.tsv$', '',  basename(data_file))
mat_data=as.matrix(cbind(data[,c(1,2,3)], const=rep(1, nrow(data))))
mat_data
stereo_angle=5
angle=stereo_angle
gam=(pi/180)*angle  # for 1 degree
# rotation along y (counter-clock wise direction)
rot_mat=matrix(data =c(cos(gam),0, sin(gam),0,0,1,0,0, -sin(gam),0, cos(gam),0,0,0,0,1) , nrow = 4, ncol=4)
rot_data=t( rot_mat %*% t(mat_data ))
colnames(rot_data)=c('X','Y','Z','const')
rot_data=data.frame(rot_data)
rot_data$Color=data$Color
rot2_data=rot_data[,-4]
data$Color=factor(data$Color)
colors_vec=rainbow(length(levels(data$Color)))
data_Color=mapvalues(x=data$Color, from = levels(data$Color), to = colors_vec)
p <-layout(matrix(c(1,2,3,3), ncol=2, nrow=2, byrow=TRUE), heights=c(4, 1))
if(missing(connection_file))
{
scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
}
else {
connection_df=read.table(file = connection_file, header = T)
sd3_1=scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_1$xyz.convert(data$X[f],data$Z[f],data$Y[f])
p2 <- sd3_1$xyz.convert(data$X[s],data$Z[s],data$Y[s])
#segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col='black',lwd=1)
}
sd3_2=scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_2$xyz.convert(rot2_data$X[f],rot2_data$Z[f],rot2_data$Y[f])
p2 <- sd3_2$xyz.convert(rot2_data$X[s],rot2_data$Z[s],rot2_data$Y[s])
segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(rot2_data$X[c(f,s)],rot2_data$Y[c(f,s)],rot2_data$Z[c(f,s)],col='black',lwd=1)
}
}
par(mai=c(0.6,0,0,0))
plot.new()
legend(x="center", ncol=length(levels(factor(data$Color))), col= colors_vec, bg="white", legend = levels(factor(data$Color)), x.intersp=.5, y.intersp=0, cex = 1, pch = 16, xpd = NA,  bty="n")
print(p)
pdf(paste0(data_name,'_Stereo.pdf'))
p <-layout(matrix(c(1,2,3,3), ncol=2, nrow=2, byrow=TRUE), heights=c(4, 1))
if(missing(connection_file))
{
scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
}
else {
connection_df=read.table(file = connection_file, header = T)
sd3_1=scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_1$xyz.convert(data$X[f],data$Z[f],data$Y[f])
p2 <- sd3_1$xyz.convert(data$X[s],data$Z[s],data$Y[s])
#segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col='black',lwd=1)
}
sd3_2=scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_2$xyz.convert(rot2_data$X[f],rot2_data$Z[f],rot2_data$Y[f])
p2 <- sd3_2$xyz.convert(rot2_data$X[s],rot2_data$Z[s],rot2_data$Y[s])
segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(rot2_data$X[c(f,s)],rot2_data$Y[c(f,s)],rot2_data$Z[c(f,s)],col='black',lwd=1)
}
}
par(mai=c(0.6,0,0,0))
plot.new()
legend(x="center", ncol=length(levels(factor(data$Color))), col= colors_vec, bg="white", legend = levels(factor(data$Color)), x.intersp=.5, y.intersp=0, cex = 1, pch = 16, xpd = NA,  bty="n")
print(p)
dev.off()
distance=0
pdf(paste0(data_name,'_Stereo.pdf'))
p <-layout(matrix(c(1,2,3,3), ncol=2, nrow=2, byrow=TRUE), heights=c(4, 1))
if(missing(connection_file))
{
scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
}
else {
connection_df=read.table(file = connection_file, header = T)
sd3_1=scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_1$xyz.convert(data$X[f],data$Z[f],data$Y[f])
p2 <- sd3_1$xyz.convert(data$X[s],data$Z[s],data$Y[s])
#segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col='black',lwd=1)
}
sd3_2=scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_2$xyz.convert(rot2_data$X[f],rot2_data$Z[f],rot2_data$Y[f])
p2 <- sd3_2$xyz.convert(rot2_data$X[s],rot2_data$Z[s],rot2_data$Y[s])
segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(rot2_data$X[c(f,s)],rot2_data$Y[c(f,s)],rot2_data$Z[c(f,s)],col='black',lwd=1)
}
}
par(mai=c(0.6,0,0,0))
plot.new()
legend(x="center", ncol=length(levels(factor(data$Color))), col= colors_vec, bg="white", legend = levels(factor(data$Color)), x.intersp=.5, y.intersp=0, cex = 1, pch = 16, xpd = NA,  bty="n")
print(p)
dev.off()
f
connection_df=read.table(file = 'connection_file.tsv', header = T)
Stereo3D <- function(data_file, stereo_angle=5, distance=0, connection_file=connection_fileName){
if(data_file != 'empty' & file_ext(data_file)=='tsv' & file.exists(data_file)){
data=read.table(file=data_file, header = TRUE)
} else if (data_file != 'empty' & file_ext(data_file)!='tsv'){
stop("File don't have '.tsv' extension" , call. = TRUE, domain = NULL)
geterrmessage()
}else if (data_file != 'empty' & !file.exists(data_file)){
stop("tab seperated data file path does not exist", call. = TRUE, domain = NULL)
geterrmessage()
} else if(data_file=='empty') {
stop(" tab seperated data file path is not given", call. = TRUE, domain = NULL)
geterrmessage()
}
#data=read.table(file='Mesp1_WT_SubCells.tsv', header = TRUE)
data_name=sub('\\.tsv$', '',  basename(data_file))
mat_data=as.matrix(cbind(data[,c(1,2,3)], const=rep(1, nrow(data))))
angle=stereo_angle
gam=(pi/180)*angle  # for 1 degree
# rotation along y (counter-clock wise direction)
rot_mat=matrix(data =c(cos(gam),0, sin(gam),0,0,1,0,0, -sin(gam),0, cos(gam),0,0,0,0,1) , nrow = 4, ncol=4)
rot_data=t( rot_mat %*% t(mat_data ))
colnames(rot_data)=c('X','Y','Z','const')
rot_data=data.frame(rot_data)
rot_data$Color=data$Color
rot2_data=rot_data[,-4]
data$Color=factor(data$Color)
colors_vec=rainbow(length(levels(data$Color)))
data_Color=mapvalues(x=data$Color, from = levels(data$Color), to = colors_vec)
pdf(paste0(data_name,'_Stereo.pdf'))
p <-layout(matrix(c(1,2,3,3), ncol=2, nrow=2, byrow=TRUE), heights=c(4, 1))
if(missing(connection_file))
{
scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
}
else {
connection_df=read.table(file = connection_file, header = T)
sd3_1=scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE, mar=c(3,3,0,1+distance)) #(B-,L,T-,R)
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_1$xyz.convert(data$X[f],data$Z[f],data$Y[f])
p2 <- sd3_1$xyz.convert(data$X[s],data$Z[s],data$Y[s])
#segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col='black',lwd=1)
}
sd3_2=scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y', box=FALSE, grid=FALSE,  mar=c(3,1+distance,0,3))
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
p1 <- sd3_2$xyz.convert(rot2_data$X[f],rot2_data$Z[f],rot2_data$Y[f])
p2 <- sd3_2$xyz.convert(rot2_data$X[s],rot2_data$Z[s],rot2_data$Y[s])
segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
segments3d(rot2_data$X[c(f,s)],rot2_data$Y[c(f,s)],rot2_data$Z[c(f,s)],col='black',lwd=1)
}
}
par(mai=c(0.6,0,0,0))
plot.new()
legend(x="center", ncol=length(levels(factor(data$Color))), col= colors_vec, bg="white", legend = levels(factor(data$Color)), x.intersp=.5, y.intersp=0, cex = 1, pch = 16, xpd = NA,  bty="n")
print(p)
dev.off()
#### interactive plot ##
if(missing(connection_file))
{
StereoPLot3D(data, rot2_data,colors_vec,data_Color)
}else
{
StereoPLot3D(data, rot2_data,colors_vec,data_Color,connection_df)
}
}
connection_fileName=system.file("extdata", "connection_file.tsv", package = "Stereo3D", mustWork = TRUE)
setwd("~/Documents/DZ-VKS/Stereo3D")
devtools::load_all(".")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library("Stereo3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages('Stereo3D')
detach("package:Stereo3D", unload=TRUE)
devtools::install_github("bioinfoDZ/Stereo3D",build_vignettes = FALSE )
library(Stereo3D)
library(Stereo3D)
??Stereo3D
?? Stereo3D
??Stereo3D::Stereo3D
devtools::load_all(".")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
Stereo3D(data_file=sample_data_file, stereo_angle=5, distance=0, connection_file=connection_fileName)
connection_fileName=system.file("extdata", "connection_file.tsv", package = "Stereo3D", mustWork = TRUE)
sample_data_file=system.file("extdata", "sample_3D_data.tsv", package = "Stereo3D", mustWork = TRUE)
Stereo3D(data_file=sample_data_file, stereo_angle=5, distance=0, connection_file=connection_fileName)
Stereo3D(data_file=sample_data_file, stereo_angle=5, distance=0, connection_file=connection_fileName)
connection_fileName=system.file("extdata", "connection_file.tsv", package = "Stereo3D", mustWork = TRUE)
sample_data_file=system.file("extdata", "sample_3D_data.tsv", package = "Stereo3D", mustWork = TRUE)
Stereo3D(data_file=sample_data_file, stereo_angle=5, distance=0, connection_file=connection_fileName)
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
library(Stereo3D)
sample_data_file=system.file("extdata", "sample_3D_data.tsv", package = "Stereo3D", mustWork = TRUE)
connection_fileName=system.file("extdata", "connection_file.tsv", package = "Stereo3D", mustWork = TRUE)
Stereo3D(data_file=sample_data_file, stereo_angle=5, distance=0, connection_file=connection_fileName)
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
library(Stereo3D)
library(Stereo3D)
Stereo3D(data_file=sample_data_file, stereo_angle=5, distance=0, connection_file=connection_fileName)
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
library(Stereo3D)
library(Stereo3D)
library("MutSigTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
library(Stereo3D)
detach("package:Stereo3D", unload=TRUE)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
library(rmarkdown)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
detach("package:Stereo3D", unload=TRUE)
library(Stereo3D)
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
detach("package:Stereo3D", unload=TRUE)
library(Stereo3D)
connection_fileName=system.file("extdata", "connection_file.tsv", package = "Stereo3D", mustWork = TRUE)
sample_data_file=system.file("extdata", "sample_3D_data.tsv", package = "Stereo3D", mustWork = TRUE)
Stereo3D(data_file=sample_data_file, stereo_angle=5, distance=0, connection_file=connection_fileName)
data$Color=factor(data$Color)
colors_vec=rainbow(length(levels(data$Color)))
sample_data_file
data_file=sample_data_file
data_name=sub('\\.tsv$', '',  basename(data_file))
data_name
data=read.table(file=data_file, header = TRUE)
data
head(data)
remove.packages('Stereo3D')
detach("package:Stereo3D", unload=TRUE)
library(Stereo3D)
remove.packages('Stereo3D')
detach("package:Stereo3D", unload=TRUE)
library(Stereo3D)
library(Stereo3D)
devtools::document()
data=read.table(file=data_file, header = TRUE)
head(data)
devtools::load_all(".")
detach("package:Stereo3D", unload=TRUE)
remove.packages('Stereo3D')
devtools::build_manual()
devtools::document()
30000*70
