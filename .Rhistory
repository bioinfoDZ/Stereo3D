# plot.new()
# legend(x="center", ncol=length(levels(factor(data$Color))), col= colors_vec, bg="white", legend = levels(factor(data$Color)), x.intersp=.5, y.intersp=0, cex = 1, pch = 16, xpd = NA,  bty="n")
#
# dev.off()
# grp1=which(data$Color==1)
# grp6=which(data$Color==6)
# connection_df=data.frame(first=sample(grp1,5,replace = FALSE, prob = NULL), second=sample(grp6,5,replace = FALSE, prob = NULL))
# write.table(x=connection_df, file = 'connection_file.tsv', quote = F, col.names = T, row.names = F)
# connection_df=read.table(file = 'connection_file.tsv', header = T)
# for(i in 1:nrow(connection_df))
# {
#   f=connection_df$first[i]
#   s=connection_df$second[i]
#   #p1 <- sd3_1$xyz.convert(data$X[f],data$Y[f],data$Z[f])
#   #p2 <- sd3_1$xyz.convert(data$X[s],data$Y[s],data$Z[s])
#   #segments(p1$x,p1$y,p2$x,p2$y,lwd=2,col=2)
#
#   segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col=2,lwd=2)
# }
#####
data$Color=factor(data$Color)
colors_vec=rainbow(length(levels(data$Color)))
library(plyr)
data_Color=mapvalues(x=data$Color, from = levels(data$Color), to = colors_vec)
library(rgl)
distance=0
open3d()
par3d(windowRect = c(100, 100, 612, 612))
Sys.sleep(0.1) # Allow sluggish window managers to catch up
parent <- currentSubscene3d()
layout3d(matrix(c(1,2,3,3), ncol=2, nrow=2, byrow=TRUE), heights=c(4, 1),sharedMouse = TRUE)
#mfrow3d(2,2, sharedMouse = TRUE)
plot3d(x=data$X, y=data$Y,z=data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,3,0,1+distance))
connection_df=read.table(file = 'connection_file.tsv', header = T)
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col='black',lwd=1)
}
next3d()
plot3d(x=rot2_data$X, y=rot2_data$Y,z=rot2_data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,1+distance,0,3))
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
segments3d(rot2_data$X[c(f,s)],rot2_data$Y[c(f,s)],rot2_data$Z[c(f,s)],col='black',lwd=1)
}
library(plotrix)
colors=sapply(colors_vec, function(x) color.id(x)[1])
next3d()
#legend3d("center", c("2D Points", "3D Points"), pch = c(1, 16))
legend3d("top", legend=levels(factor(rot2_data$Color)), col=colors,horiz = TRUE, cex=1, inset=c(0.02), bty = "n", pch=16,  xpd = NA, x.intersp=.5, y.intersp=0)
useSubscene3d(parent)
}
# ## save
# library(rgl)
# browseURL(paste("file://", writeWebGL(dir=file.path(getwd(), "webGL"), width=700), sep=""))
#
# #rgl.postscript('test2')
# snapshot3d('test4')
test()
##
test <- function(){
data=read.table(file='Mesp1_WT_SubCells.tsv', header = TRUE)
mat_data=as.matrix(cbind(data[,c(1,2,3)], const=rep(1, nrow(data))))
angle=5
gam=(pi/180)*angle  # for 15 degree
# rotation along y (counter-clock wise direction)
rot_mat=matrix(data =c(cos(gam),0, sin(gam),0,0,1,0,0, -sin(gam),0, cos(gam),0,0,0,0,1) , nrow = 4, ncol=4)
rot_data=(mat_data %*% rot_mat)
colnames(rot_data)=c('X','Y','Z','const')
rot_data=data.frame(rot_data)
rot_data$Color=data$Color
rot2_data=rot_data[,-4]
#####
# data$Color=factor(data$Color)
# colors_vec=rainbow(length(levels(data$Color)))
#
# library(plyr)
# data_Color=mapvalues(x=data$Color, from = levels(data$Color), to = colors_vec)
#
# library(scatterplot3d)
# pdf('myplot2.pdf')
#
# layout(matrix(c(1,2,3,3), ncol=2, nrow=2, byrow=TRUE), heights=c(4, 1))
#
# sd3_1=scatterplot3d(x=data$X, y=data$Z,z=data$Y, pch=16,color = data_Color, xlab='X', ylab='', zlab='Y',box=FALSE,grid=FALSE, mar=c(3,3,0,1))
#
# grp1=which(data$Color==10)
# grp6=which(data$Color==6)
# connction_df=data.frame(first=sample(grp1,5,replace = FALSE, prob = NULL), second=sample(grp6,5,replace = FALSE, prob = NULL))
#
# for(i in 1:nrow(connection_df))
# {
#   f=connection_df$first[i]
#   s=connection_df$second[i]
#   p1 <- sd3_1$xyz.convert(data$X[f],data$Z[f],data$Y[f])
#   p2 <- sd3_1$xyz.convert(data$X[s],data$Z[s],data$Y[s])
#   segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
# }
#
# sd3_2=scatterplot3d(x=rot2_data$X, y=rot2_data$Z,z=rot2_data$Y,pch=16,color = data_Color, xlab='X', ylab='', zlab='Y',box=FALSE, grid=FALSE,  mar=c(3,1,0,03))
#
# for(i in 1:nrow(connection_df))
# {
#   f=connection_df$first[i]
#   s=connection_df$second[i]
#   p1 <- sd3_2$xyz.convert(rot2_data$X[f],rot2_data$Z[f],rot2_data$Y[f])
#   p2 <- sd3_2$xyz.convert(rot2_data$X[s],rot2_data$Z[s],rot2_data$Y[s])
#   segments(p1$x,p1$y,p2$x,p2$y,lwd=1,col='black')
# }
# par(mai=c(0.6,0,0,0))
# plot.new()
# legend(x="center", ncol=length(levels(factor(data$Color))), col= colors_vec, bg="white", legend = levels(factor(data$Color)), x.intersp=.5, y.intersp=0, cex = 1, pch = 16, xpd = NA,  bty="n")
#
# dev.off()
# grp1=which(data$Color==1)
# grp6=which(data$Color==6)
# connection_df=data.frame(first=sample(grp1,5,replace = FALSE, prob = NULL), second=sample(grp6,5,replace = FALSE, prob = NULL))
# write.table(x=connection_df, file = 'connection_file.tsv', quote = F, col.names = T, row.names = F)
# connection_df=read.table(file = 'connection_file.tsv', header = T)
# for(i in 1:nrow(connection_df))
# {
#   f=connection_df$first[i]
#   s=connection_df$second[i]
#   #p1 <- sd3_1$xyz.convert(data$X[f],data$Y[f],data$Z[f])
#   #p2 <- sd3_1$xyz.convert(data$X[s],data$Y[s],data$Z[s])
#   #segments(p1$x,p1$y,p2$x,p2$y,lwd=2,col=2)
#
#   segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col=2,lwd=2)
# }
#####
data$Color=factor(data$Color)
colors_vec=rainbow(length(levels(data$Color)))
library(plyr)
data_Color=mapvalues(x=data$Color, from = levels(data$Color), to = colors_vec)
library(rgl)
distance=0
open3d()
par3d(windowRect = c(100, 100, 612, 612))
Sys.sleep(0.1) # Allow sluggish window managers to catch up
parent <- currentSubscene3d()
layout3d(matrix(c(1,2,3,3), ncol=2, nrow=2, byrow=TRUE), heights=c(4, 1),sharedMouse = TRUE)
#mfrow3d(2,2, sharedMouse = TRUE)
plot3d(x=data$X, y=data$Y,z=data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,3,0,1+distance))
connection_df=read.table(file = 'connection_file.tsv', header = T)
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
segments3d(data$X[c(f,s)],data$Y[c(f,s)],data$Z[c(f,s)],col='black',lwd=1)
}
next3d()
plot3d(x=rot2_data$X, y=rot2_data$Y,z=rot2_data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,1+distance,0,3))
for(i in 1:nrow(connection_df))
{
f=connection_df$first[i]
s=connection_df$second[i]
segments3d(rot2_data$X[c(f,s)],rot2_data$Y[c(f,s)],rot2_data$Z[c(f,s)],col='black',lwd=1)
}
library(plotrix)
colors=sapply(colors_vec, function(x) color.id(x)[1])
next3d()
#legend3d("center", c("2D Points", "3D Points"), pch = c(1, 16))
legend3d("top", legend=levels(factor(rot2_data$Color)), col=colors,horiz = TRUE, cex=1, inset=c(0.02), bty = "n", pch=16,  xpd = NA, x.intersp=.5, y.intersp=0)
useSubscene3d(parent)
}
# ## save
# library(rgl)
# browseURL(paste("file://", writeWebGL(dir=file.path(getwd(), "webGL"), width=700), sep=""))
#
# #rgl.postscript('test2')
# snapshot3d('test4')
plot3d(x=rot2_data$X, y=rot2_data$Y,z=rot2_data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,1+distance,0,3), border = "black")
test <- function(){
data=read.table(file='Mesp1_WT_SubCells.tsv', header = TRUE)
mat_data=as.matrix(cbind(data[,c(1,2,3)], const=rep(1, nrow(data))))
angle=5
gam=(pi/180)*angle  # for 15 degree
# rotation along y (counter-clock wise direction)
rot_mat=matrix(data =c(cos(gam),0, sin(gam),0,0,1,0,0, -sin(gam),0, cos(gam),0,0,0,0,1) , nrow = 4, ncol=4)
rot_data=(mat_data %*% rot_mat)
colnames(rot_data)=c('X','Y','Z','const')
rot_data=data.frame(rot_data)
rot_data$Color=data$Color
rot2_data=rot_data[,-4]
data=read.table(file='Mesp1_WT_SubCells.tsv', header = TRUE)
mat_data=as.matrix(cbind(data[,c(1,2,3)], const=rep(1, nrow(data))))
angle=5
gam=(pi/180)*angle  # for 15 degree
# rotation along y (counter-clock wise direction)
rot_mat=matrix(data =c(cos(gam),0, sin(gam),0,0,1,0,0, -sin(gam),0, cos(gam),0,0,0,0,1) , nrow = 4, ncol=4)
rot_data=(mat_data %*% rot_mat)
colnames(rot_data)=c('X','Y','Z','const')
rot_data=data.frame(rot_data)
rot_data$Color=data$Color
rot2_data=rot_data[,-4]
data$Color=factor(data$Color)
colors_vec=rainbow(length(levels(data$Color)))
library(plyr)
data_Color=mapvalues(x=data$Color, from = levels(data$Color), to = colors_vec)
plot3d(x=rot2_data$X, y=rot2_data$Y,z=rot2_data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,1+distance,0,3), border = "black")
distance=0
plot3d(x=rot2_data$X, y=rot2_data$Y,z=rot2_data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,1+distance,0,3), border = "black")
plot3d(x=rot2_data$X, y=rot2_data$Y,z=rot2_data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,1+distance,0,3), border = "grey")
plot3d(x=rot2_data$X, y=rot2_data$Y,z=rot2_data$Z, col = data_Color, xlab = 'X', ylab = 'Y', zlab='Z', margin=c(3,1+distance,0,3), border = "blue")
getwd()
alternate_string <- function(x_ind_list, new_str)
{
for(i in 1:length(x_ind_list))
{
name=names(x_ind_list[i])
ind_data=x_ind_list[[i]]
if(nrow(ind_data)>0)
{
for(j in 1:nrow(ind_data))
{
#print(ind_data[j,])
new_str[ind_data[j,1]: ind_data[j,2]]=name
}
}
}
return(new_str)
}
###### Important variables ###
first_filt=c('i0','g0','i2','g2')
second_filt=c('a00','a06','a30','a36','h00','h06','h30','h36','s00','s06','s30','s36' )
orginal_char=c(first_filt, second_filt)
first_name=letters[1:4]
second_name=LETTERS[seq(5,5+11)]
mapped_char=c(first_name, second_name)
alphabets=paste0(mapped_char,collapse='')
library(readtext)
input_HSseq_file='simulated_HSseqs_new_18_7.txt'
#input_HSseq_file='simulated_HSseqs_new_18_7_includeVoidSeqs.txt'
input_filenam=gsub(pattern = "\\.txt$", "", input_HSseq_file)
HS_seq_data=readtext(input_HSseq_file)
#HS_seq_data=readtext('HS_seqs_formatted.txt')
HS_seqs=strsplit(HS_seq_data$text, '\n')[[1]]
header=HS_seqs[seq(1,length(HS_seqs),2)]
seqs=HS_seqs[seq(2,length(HS_seqs),2)]
source('mapToAlphabets.R')
mapped_seqs=lapply(seqs, mapToAlphabets, first_filt, second_filt, orginal_char, mapped_char)
intermediate_mapped_file='HSSeqs_To_AlphabetMapped_formatted.txt'
if (file.exists(intermediate_mapped_file))
file.remove(intermediate_mapped_file)
sink(intermediate_mapped_file)
for(i in 1:length(mapped_seqs))
{
cat(paste0(header[i],'\n'))
cat(paste0(mapped_seqs[i],'\n'))
}
sink()
HSseqAlpha_data=readtext('HSSeqs_To_AlphabetMapped_formatted.txt')
#HSseqAlpha_data=readtext('simulated_seqs.txt')
HS_Alpha_seqs=strsplit(HSseqAlpha_data$text, '\n')[[1]]
header=HS_Alpha_seqs[seq(1,length(HS_Alpha_seqs),2)]
Alpha_seqs=HS_Alpha_seqs[seq(2,length(HS_Alpha_seqs),2)]
names(Alpha_seqs)=header
weight=TRUE
if(weight==TRUE)
{
weight_vec=read.table(file='weightData.txt')
} else if(weight==FALSE)
{
weight_vec=data.frame(rep(1,length(Alpha_seqs)))
}
library('Biostrings')
seq_BString=BStringSet(Alpha_seqs)  # library('Biostrings')
#motifs_seqs=subseq(seq_BString,start= motif_loc, width=7)
unique_letters=uniqueLetters(seq_BString) # # library('Biostrings')
motif_width=7
seq='s00g0s00i2s00i2s00i2s00i2s00i2s00i2s00i2s00g0'
library('stringr')
seq2=strsplit(seq, split='')[[1]]
new_str=rep(NA,length(seq2))
first_ind_list=str_locate_all(seq, first_filt)
names(first_ind_list)=first_filt
new_str=alternate_string(first_ind_list,new_str)
input_filenam=gsub(pattern = "\\.txt$", "", input_HSseq_file)
HS_seq_data=readtext(input_HSseq_file)
#HS_seq_data=readtext('HS_seqs_formatted.txt')
HS_seqs=strsplit(HS_seq_data$text, '\n')[[1]]
header=HS_seqs[seq(1,length(HS_seqs),2)]
seqs=HS_seqs[seq(2,length(HS_seqs),2)]
seqs
seq[1]
seqs[1]
mapped_seqs=lapply(seqs, mapToAlphabets, first_filt, second_filt, orginal_char, mapped_char)
mapped_seqs[1]
source('mapToAlphabets.R')
mapped_seqs=lapply(seqs, mapToAlphabets, first_filt, second_filt, orginal_char, mapped_char)
intermediate_mapped_file='HSSeqs_To_AlphabetMapped_formatted.txt'
if (file.exists(intermediate_mapped_file))
file.remove(intermediate_mapped_file)
sink(intermediate_mapped_file)
for(i in 1:length(mapped_seqs))
{
cat(paste0(header[i],'\n'))
cat(paste0(mapped_seqs[i],'\n'))
}
sink()
HSseqAlpha_data=readtext('HSSeqs_To_AlphabetMapped_formatted.txt')
#HSseqAlpha_data=readtext('simulated_seqs.txt')
HS_Alpha_seqs=strsplit(HSseqAlpha_data$text, '\n')[[1]]
header=HS_Alpha_seqs[seq(1,length(HS_Alpha_seqs),2)]
Alpha_seqs=HS_Alpha_seqs[seq(2,length(HS_Alpha_seqs),2)]
names(Alpha_seqs)=header
Alpha_seqs
seq_BString=BStringSet(Alpha_seqs)  # library('Biostrings')
#motifs_seqs=subseq(seq_BString,start= motif_loc, width=7)
unique_letters=uniqueLetters(seq_BString) # # library('Biostrings')
motif_width=7
source('freq_matrices.R')
source('calculate_MaxScoreInd_Of_SelectedSeq.R')
mystart=sapply(width(seq_BString)-motif_width, sample, 1)
mystart
source('freq_matrices.R')
source('calculate_MaxScoreInd_Of_SelectedSeq.R')
mystart=sapply(width(seq_BString)-motif_width, sample, 1)
mystart_initial=mystart
seq_lengths=width(seq_BString)
motifScore_rep_count=0
motifScore_circular_variable=seq(1,100)
while(sd(motifScore_circular_variable) > .1)
{
removed_seq_ind=sample(seq(1:length(seq_BString)),1)
remaining_seqs=seq_BString[-removed_seq_ind]
selected_seq=seq_BString[removed_seq_ind]
matrices=freq_matrices(remaining_seqs, motif_width , mystart[-removed_seq_ind], weight_vec[-removed_seq_ind,])
MaxScoreInd=calculate_MaxScoreInd_Of_SelectedSeq(matrices,selected_seq, motif_width )
mystart[removed_seq_ind]=MaxScoreInd
#print(err)
motifScore=matrices$F_score
print(c(motifScore_rep_count,motifScore))
motifScore_circular_variable=c(motifScore, motifScore_circular_variable)[1:length(motifScore_circular_variable)]
## randomly move discovered motif left or right by the random length after certain interval ##
motifScore_rep_count=motifScore_rep_count+1
if(motifScore_rep_count>3000)
{
print(paste0('====',motifScore_rep_count))
shift_length <- c(2,1,1,2)
tempStartLst=list()
F_score=c()
tempError=c()
for(k in 1:length(shift_length))
{
tempStart=mystart
if(k>(length(shift_length)/2))  # shift right
{
good_ind=which((tempStart+shift_length[k]+ motif_width) < seq_lengths)
tempStart[good_ind] = tempStart[good_ind] + shift_length[k] ##
tempMatrices=freq_matrices(remaining_seqs, motif_width , tempStart[-removed_seq_ind], weight_vec[-removed_seq_ind,])
F_score[k]=tempMatrices$F_score
tempStartLst[[k]]=tempStart
}else if(k <= (length(shift_length)/2)) # shift left
{
good_ind=which(tempStart > shift_length[k])
tempStart[good_ind] = tempStart[good_ind]-shift_length[k]
tempMatrices=freq_matrices(remaining_seqs, motif_width , tempStart[-removed_seq_ind], weight_vec[-removed_seq_ind,])
F_score[k]=tempMatrices$F_score
tempStartLst[[k]]=tempStart
}
}
req_pos_inds=which(F_score>motifScore)
#shift_FScore_vec=F_score/sum(F_score)
#random_shift=sample(seq(1:length(shift_FScore_vec)), size = 1, replace = TRUE, prob = shift_FScore_vec)
#mystart=tempStartLst[[random_shift]]
#req_pos_inds=seq(1:length(shift_length))
if(length(req_pos_inds)>0)
{
sampled_pos_ind=sample(req_pos_inds,1)
mystart=tempStartLst[[sampled_pos_ind]]
} else
{
mystart=mystart
}
motifScore_rep_count=0
}
}
mystart
final_parameter_data=freq_matrices(seq_BString, motif_width , mystart, unname(unlist(weight_vec)))
final_PSSM_matrix=final_parameter_data$motif_PSSM
final_bkg_vec=final_parameter_data$bkg_mat
library('ggseqlogo')
discovered_motifs=as.vector(subseq(seq_BString,start= mystart, width=motif_width))
p1<-ggseqlogo(discovered_motifs, namespace=alphabets, method='b')
library(plyr)
b=lapply(discovered_motifs, function(x) paste0(mapvalues(strsplit(x, '')[[1]],from=mapped_char, to=orginal_char, warn_missing = FALSE), collapse=''))
orgChar_discoveredMotifs=as.character(b)
p2 <- ggseqlogo(orgChar_discoveredMotifs, namespace=orginal_char, method='b')
library('gridExtra')
grid.arrange(p1, p2, nrow = 2)
rot_mat
rot_data=( rot_mat %*% t(mat_data ))
rot_data
rot_mat
colnames(rot_data)=c('X','Y','Z','const')
rot_data=data.frame(rot_data)
rot_data$Color=data$Color
rot2_data=rot_data[,-4]
rot_data=( rot_mat %*% (mat_data ))
rot_data=( rot_mat %*% (mat_data ))
rot_mat %*% (mat_data )
rot_mat
dim(mat_data)
dim(t(mat_data))
( rot_mat %*% t(mat_data ))
rot_data
dim(rot_data)
(mat_data %*% rot_mat)
t( rot_mat %*% t(mat_data ))
t( rot_mat %*% t(mat_data ))[20]
t( rot_mat %*% t(mat_data ))[20,]
(mat_data %*% rot_mat)[20,]
rot_mat
-sin(gam)
sin(gam)
424*20
20/444
34/444
6/42
(444-384)/444
load_all()
devtools::load_all(".")
load_all()
library(devtools)
load_all()
devtools::build_vignettes()
devtools::build_manual()
devtools::build_readme()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_vignettes()
devtools::install_github("rstudio/rmarkdown")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
devtools::build_vignettes()
devtools::document()
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library("Stereo3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::load_all(".")
library("Stereo3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
?? Stereo3D
library(Stereo3D)
?? Stereo3D
541+3839
4380/12
3100+365
(3100+365)*12
200*12
411*10
library(Stereo3D)
devtools::load_all(".")
library(Stereo3D)
devtools::load_all(".")
?? Stereo3D
devtools::load_all(".")
devtools::document()
library("Stereo3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
devtools::document()
library(Stereo3D)
library(Stereo3D)
devtools::document()
library(Stereo3D)
library(Stereo3D)
devtools::load_all(".")
devtools::document()
library(Stereo3D)
devtools::document()
library(Stereo3D)
library(Stereo3D)
devtools::document()
library(Stereo3D)
library(Stereo3D)
library(rmarkdown)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
library(rmarkdown)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
getwd()
library(rmarkdown)
rmarkdown::render("/Users/vinodsingh/Documents/DZ-VKS/Stereo3D/vignettes/Stereo3D_vignette.Rmd", output_format = latex_document())
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
library(Stereo3D)
devtools::document()
library(Stereo3D)
devtools::build_manual()
